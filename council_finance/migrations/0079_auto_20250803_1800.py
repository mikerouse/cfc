# Generated by Django 5.2.3 on 2025-08-03 17:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('council_finance', '0078_fix_council_website_null_constraint'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_used', models.CharField(default='gpt-4o-mini', max_length=50)),
                ('factoids_requested', models.IntegerField(default=3)),
                ('factoids_generated', models.IntegerField(default=0)),
                ('processing_time_seconds', models.FloatField(blank=True, null=True)),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('style', models.CharField(default='news_ticker', max_length=20)),
                ('force_refresh', models.BooleanField(default=False)),
                ('cache_hit', models.BooleanField(default=False)),
                ('success', models.BooleanField(default=True)),
                ('error_type', models.CharField(blank=True, max_length=100)),
                ('error_message', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('council', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_usage_logs', to='council_finance.council')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_usage_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DailyCostSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('total_requests', models.IntegerField(default=0)),
                ('successful_requests', models.IntegerField(default=0)),
                ('failed_requests', models.IntegerField(default=0)),
                ('cache_hits', models.IntegerField(default=0)),
                ('total_factoids_generated', models.IntegerField(default=0)),
                ('avg_processing_time', models.FloatField(blank=True, null=True)),
                ('total_tokens_used', models.IntegerField(default=0)),
                ('total_estimated_cost', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
                ('cost_per_factoid', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('model_usage_breakdown', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'daily_cost_summary',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CacheWarmupSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=1, help_text='1=High, 2=Medium, 3=Low')),
                ('frequency_hours', models.IntegerField(default=24, help_text='How often to warm cache (hours)')),
                ('avg_daily_requests', models.IntegerField(default=0)),
                ('last_request', models.DateTimeField(blank=True, null=True)),
                ('popularity_score', models.FloatField(default=0.0)),
                ('last_warmup', models.DateTimeField(blank=True, null=True)),
                ('next_warmup', models.DateTimeField(blank=True, null=True)),
                ('consecutive_failures', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('council', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warmup_schedules', to='council_finance.council')),
            ],
            options={
                'db_table': 'cache_warmup_schedule',
                'ordering': ['priority', '-popularity_score'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('high_cost', 'High Cost Alert'), ('slow_response', 'Slow Response Time'), ('high_failure_rate', 'High Failure Rate'), ('cache_inefficiency', 'Cache Inefficiency'), ('budget_threshold', 'Budget Threshold Exceeded'), ('optimization_opportunity', 'Optimization Opportunity')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('recommendation', models.TextField(blank=True)),
                ('metric_value', models.FloatField(blank=True, null=True)),
                ('threshold_value', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('council', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='council_finance.council')),
            ],
            options={
                'db_table': 'performance_alert',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='aiusagelog',
            index=models.Index(fields=['created_at'], name='ai_usage_lo_created_7daec8_idx'),
        ),
        migrations.AddIndex(
            model_name='aiusagelog',
            index=models.Index(fields=['council', 'created_at'], name='ai_usage_lo_council_893bcf_idx'),
        ),
        migrations.AddIndex(
            model_name='aiusagelog',
            index=models.Index(fields=['model_used', 'created_at'], name='ai_usage_lo_model_u_d7b6e9_idx'),
        ),
        migrations.AddIndex(
            model_name='aiusagelog',
            index=models.Index(fields=['success', 'created_at'], name='ai_usage_lo_success_0b7a7e_idx'),
        ),
        migrations.AddIndex(
            model_name='dailycostsummary',
            index=models.Index(fields=['date'], name='daily_cost__date_4ee73b_idx'),
        ),
        migrations.AddIndex(
            model_name='cachewarmupschedule',
            index=models.Index(fields=['is_active', 'next_warmup'], name='cache_warmu_is_acti_6c0a19_idx'),
        ),
        migrations.AddIndex(
            model_name='cachewarmupschedule',
            index=models.Index(fields=['priority', 'popularity_score'], name='cache_warmu_priorit_10c86a_idx'),
        ),
        migrations.AddIndex(
            model_name='performancealert',
            index=models.Index(fields=['is_active', 'severity'], name='performance_is_acti_0e8ad7_idx'),
        ),
        migrations.AddIndex(
            model_name='performancealert',
            index=models.Index(fields=['alert_type', 'created_at'], name='performance_alert_t_d31bec_idx'),
        ),
    ]
